lexeme: declare 
lexeme: module 
lexeme: compute 
lexeme: ; 
lexeme: <<< 
lexeme: driver 
lexeme: program 
lexeme: >>> 
lexeme: start 
lexeme: declare 
lexeme: var_1_ 
lexeme: , 
lexeme: var_2_ 
lexeme: , 
lexeme: var_3_ 
lexeme: : 
lexeme: integer 
lexeme: ; 
lexeme: declare 
lexeme: R1_abc 
lexeme: : 
lexeme: boolean 
lexeme: ; 
lexeme: declare 
lexeme: r2_ABC 
lexeme: : 
lexeme: integer 
lexeme: ; 
lexeme: declare 
lexeme: R3_abc 
lexeme: : 
lexeme: real 
lexeme: ; 
lexeme: get_value 
lexeme: ( 
lexeme: var_1_ 
lexeme: ) 
lexeme: ; 
lexeme: var_2_ 
lexeme: := 
lexeme: 10 
lexeme: ; 
lexeme: var_3_ 
lexeme: := 
lexeme: - 
lexeme: ( 
lexeme: 6 
lexeme: ) 
lexeme: ; 
lexeme: [ 
lexeme: R1_abc 
lexeme: , 
lexeme: r2_ABC 
lexeme: , 
lexeme: R3_abc 
lexeme: ] 
lexeme: := 
lexeme: use 
lexeme: module 
lexeme: compute 
lexeme: with 
lexeme: parameters 
lexeme: var_1_ 
lexeme: , 
lexeme: var_2_ 
lexeme: , 
lexeme: var_34 
lexeme: ; 
lexeme: end 
lexeme: << 
lexeme: module 
lexeme: compute 
lexeme: >> 
lexeme: takes 
lexeme: input 
lexeme: [ 
lexeme: a 
lexeme: : 
lexeme: integer 
lexeme: , 
lexeme: b 
lexeme: : 
lexeme: integer 
lexeme: , 
lexeme: c 
lexeme: : 
lexeme: integer 
lexeme: ] 
lexeme: ; 
lexeme: returns 
lexeme: [ 
lexeme: res_1 
lexeme: : 
lexeme: boolean 
lexeme: , 
lexeme: res_2_a 
lexeme: : 
lexeme: integer 
lexeme: , 
lexeme: res_2__b 
lexeme: : 
lexeme: real 
lexeme: ] 
lexeme: ; 
lexeme: start 
lexeme: declare 
lexeme: b 
lexeme: : 
lexeme: boolean 
lexeme: ; 
lexeme: res_2_a 
lexeme: := 
lexeme: - 
lexeme: ( 
lexeme: a 
lexeme: * 
lexeme: b 
lexeme: - 
lexeme: c 
lexeme: / 
lexeme: 5 
lexeme: ) 
lexeme: ; 
lexeme: res_2__b 
lexeme: := 
lexeme: ( 
lexeme: ( 
lexeme: res_2_a 
lexeme: + 
lexeme: a 
lexeme: ) 
lexeme: * 
lexeme: 12 
lexeme: + 
lexeme: 22.34E-2 
lexeme: ) 
lexeme: / 
lexeme: 13 
lexeme: ; 
lexeme: b 
lexeme: := 
lexeme: a 
lexeme: <= 
lexeme: b 
lexeme: AND 
lexeme: c 
lexeme: >= 
lexeme: a 
lexeme: OR 
lexeme: a 
lexeme: < 
lexeme: 0 
lexeme: AND 
lexeme: false 
lexeme: ; 
lexeme: res_1 
lexeme: := 
lexeme: ( 
lexeme: true 
lexeme: AND 
lexeme: c 
lexeme: == 
lexeme: b 
lexeme: ) 
lexeme: OR 
lexeme: ( 
lexeme: b 
lexeme: > 
lexeme: p 
lexeme: AND 
lexeme: ( 
lexeme: a 
lexeme: <= 
lexeme: c 
lexeme: ) 
lexeme: ) 
lexeme: ; 
lexeme: print 
lexeme: ( 
lexeme: res_1 
lexeme: ) 
lexeme: ; 
lexeme: end 